(* Day 11 : Plutonian Pebbles *)

(* strong Outer Wilds vibe :3 *)

(** input_file name is read from argv *)
let input_file = 
  if Array.length Sys.argv < 2 then 
    failwith ("Usage : " ^ Sys.argv.(0) ^ " input_file")
  else
    Sys.argv.(1)

let read_input () =
  let i_c = open_in input_file in
  let line = input_line i_c in
  close_in i_c;
  line
  |> String.split_on_char ' '
  |> List.map int_of_string
  


(* Part 1 & 2 *)

(* First some auxiliarrys *)

(** Returns the number of digits of x *)
let rec nb_digits x =
  let rec loop nb x =
    if x <= 9 then nb+1
    else loop (nb+1) (x/10)
  in
  loop 0 x


(** Returns a to the power of b.
  * Not tail-recursive (because I'm in a lazy mood). *)
let rec exp a b =
  if b = 0 then 1 else 
  let y = exp a (b/2) in
  if b mod 2 = 0 then y*y else a*y*y 


(** Blinks one stone *)
let blink stone =
  if stone = 0 then [1]
  else 
    let nb = nb_digits stone in
    if nb mod 2 = 0 
    then let mid = exp 10 (nb/2) in [stone/mid; stone mod mid]
    else [stone * 2024]


(* Just compute recursivly the number of stones generated by one
   stone in i blinks, then sum that over the input list.
   For efficiency, I'll memorise memo, a Hashtbl that maps : 
   i, stone -> (nb of stones we get in i blinks)
*)

(** Returns the number of stones after nb_blinks on lst_stones *)
let compute nb_blinks lst_stones =

  let memo = Hashtbl.create 7500 in
  let rec nb_after_i_blinks i stone =
    if i = 0 then 1 else begin
      try Hashtbl.find memo (i, stone)
      with Not_found ->
        let nb = blink stone 
                |> List.map (nb_after_i_blinks (i-1))
                |> List.fold_left (+) 0 in
        Hashtbl.add memo (i, stone) nb;
        nb
    end
  in
  List.map (nb_after_i_blinks nb_blinks) lst_stones
  |> List.fold_left (+) 0
  
  


(** main *)
let () =
  let stones = read_input () in
  let answer1 = compute 25 stones in
  let answer2 = compute 75 stones in
  Printf.printf "%d\n%d\n" (answer1) (answer2)


